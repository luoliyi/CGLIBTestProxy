<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--被代理的目标对象用扫描，注解了的都要扫描 -->
    <context:component-scan base-package="Entities,Interfaces,Test"></context:component-scan>
    <!--<bean id="SingStar" class="Entities.SingStar"></bean>-->
    <!--<bean id="Star" class="Entities.Star"></bean>-->
    <!-- 通知 -->
    <bean id="advices" class="Aop.Advices"></bean>
    <!-- AOP配置 -->
    <!-- proxy-target-class属性表示被代理的类是否为一个没有实现接口的类，Spring会依据实现了接口则使用JDK内置的动态代理，如果未实现接口则使用cglib -->
    <aop:config proxy-target-class="true">
        <!-- 切面配置 -->
        <!--ref表示通知对象的引用 -->
        <aop:aspect ref="advices">
            <!-- 配置切入点(横切逻辑将注入的精确位置) -->
            <!--1、访问修饰符类型? 2、返回类型 3、方法的声明类? 4、方法名称 5、参数类型 6、异常类型?,
            其中以？结尾的都是可以省略掉的-->
            <!--<aop:pointcut expression="execution(public * Entities.SingStar .*(..))" id="pointcut1"/>-->
            <aop:pointcut id="pointcut1" expression="execution(* Entities.SingStar .*(..))"></aop:pointcut>

            <!--声明通知，method指定通知类型，pointcut指定切点，就是该通知应该注入那些方法中 -->
            <aop:before method="beforeMethod" pointcut-ref="pointcut1"></aop:before>
            <aop:after method="afterMethod" pointcut-ref="pointcut1"></aop:after>

         <!--  <aop:around method="aroundMethod" pointcut="execution(public * Entities..*.sing*(..))" pointcut-ref="pointcut1"/>-->
            <aop:around method="aroundMethod" pointcut-ref="pointcut1"/>

            <aop:after-throwing method="afterThrowing" pointcut-ref="pointcut1" throwing="ex"/>

            <aop:after-returning method="afterReturning" pointcut-ref="pointcut1" returning="result"/>

        </aop:aspect>
    </aop:config>
</beans>